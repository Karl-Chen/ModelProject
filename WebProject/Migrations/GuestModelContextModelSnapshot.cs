// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProject.Models;

#nullable disable

namespace WebProject.Migrations
{
    [DbContext(typeof(GuestModelContext))]
    partial class GuestModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebProject.Models.Brand", b =>
                {
                    b.Property<string>("BrandID")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("WebProject.Models.HandleOrder", b =>
                {
                    b.Property<string>("StaffID")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(1);

                    b.Property<string>("OrderNo")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("HandleTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffID", "OrderNo");

                    b.HasIndex("OrderNo");

                    b.ToTable("HandleOrder");
                });

            modelBuilder.Entity("WebProject.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("InvoiceNo");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("WebProject.Models.Member", b =>
                {
                    b.Property<string>("MemberID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MemberID");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("WebProject.Models.MemberAcc", b =>
                {
                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Mima")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Account");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("MemberAcc");
                });

            modelBuilder.Entity("WebProject.Models.MemberTel", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Index"));

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Index");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberTel");
                });

            modelBuilder.Entity("WebProject.Models.Order", b =>
                {
                    b.Property<string>("OrderNo")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsGoodPackage")
                        .HasColumnType("bit");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrdertatusID")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PayWayID")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ShippingAddr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ShippingDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingWayID")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("OrderNo");

                    b.HasIndex("MemberID");

                    b.HasIndex("OrdertatusID");

                    b.HasIndex("PayWayID");

                    b.HasIndex("ShippingWayID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("WebProject.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderNo")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ProductID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<float>("Off")
                        .HasColumnType("real");

                    b.Property<int>("Vol")
                        .HasColumnType("int");

                    b.HasKey("OrderNo", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("WebProject.Models.Ordertatus", b =>
                {
                    b.Property<string>("OrdertatusID")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("OrdertatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("OrdertatusID");

                    b.ToTable("Ordertatus");
                });

            modelBuilder.Entity("WebProject.Models.PayWay", b =>
                {
                    b.Property<string>("PayWayID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PayWayName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PayWayID");

                    b.ToTable("PayWay");
                });

            modelBuilder.Entity("WebProject.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("BrandID")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<float>("CostExchangeRate")
                        .HasColumnType("real");

                    b.Property<int>("CostJP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<int>("OrderedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<float>("PriceExchangeRage")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductSpecificationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SupplierID")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("ProductSpecificationID");

                    b.HasIndex("ProductTypeID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Prodect");
                });

            modelBuilder.Entity("WebProject.Models.ProductSpecification", b =>
                {
                    b.Property<string>("SpecificationID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SpecificationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecificationID");

                    b.ToTable("ProductSpecification");
                });

            modelBuilder.Entity("WebProject.Models.ProductType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TypeID");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("WebProject.Models.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebProject.Models.ShippingWay", b =>
                {
                    b.Property<string>("ShippingWayID")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ShippingWayName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ShippingWayID");

                    b.ToTable("ShippingWay");
                });

            modelBuilder.Entity("WebProject.Models.Staff", b =>
                {
                    b.Property<string>("StaffID")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("StaffID");

                    b.HasIndex("RoleID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("WebProject.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierID")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Addr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactWindow")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Moblie")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("WebProject.Models.HandleOrder", b =>
                {
                    b.HasOne("WebProject.Models.Order", "Order")
                        .WithMany("HandleOrder")
                        .HasForeignKey("OrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Staff", "Staff")
                        .WithMany("HandleOrder")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebProject.Models.Invoice", b =>
                {
                    b.HasOne("WebProject.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("WebProject.Models.Invoice", "OrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebProject.Models.MemberAcc", b =>
                {
                    b.HasOne("WebProject.Models.Member", "Member")
                        .WithOne("MemberAcc")
                        .HasForeignKey("WebProject.Models.MemberAcc", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("WebProject.Models.MemberTel", b =>
                {
                    b.HasOne("WebProject.Models.Member", "Member")
                        .WithMany("MemberTel")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("WebProject.Models.Order", b =>
                {
                    b.HasOne("WebProject.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Ordertatus", "Ordertatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrdertatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.PayWay", "PayWay")
                        .WithMany("Orders")
                        .HasForeignKey("PayWayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.ShippingWay", "ShippingWay")
                        .WithMany("Order")
                        .HasForeignKey("ShippingWayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Ordertatus");

                    b.Navigation("PayWay");

                    b.Navigation("ShippingWay");
                });

            modelBuilder.Entity("WebProject.Models.OrderDetail", b =>
                {
                    b.HasOne("WebProject.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebProject.Models.Product", b =>
                {
                    b.HasOne("WebProject.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.ProductSpecification", "ProductSpecification")
                        .WithMany("Products")
                        .HasForeignKey("ProductSpecificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.ProductType", "ProductType")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Supplier", "Supplier")
                        .WithMany("Product")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductSpecification");

                    b.Navigation("ProductType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebProject.Models.Staff", b =>
                {
                    b.HasOne("WebProject.Models.Role", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebProject.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebProject.Models.Member", b =>
                {
                    b.Navigation("MemberAcc");

                    b.Navigation("MemberTel");
                });

            modelBuilder.Entity("WebProject.Models.Order", b =>
                {
                    b.Navigation("HandleOrder");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("WebProject.Models.Ordertatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebProject.Models.PayWay", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebProject.Models.ProductSpecification", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebProject.Models.ProductType", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebProject.Models.Role", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebProject.Models.ShippingWay", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebProject.Models.Staff", b =>
                {
                    b.Navigation("HandleOrder");
                });

            modelBuilder.Entity("WebProject.Models.Supplier", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
